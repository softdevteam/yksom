var searchIndex = JSON.parse('{\
"yksom":{"doc":"A SOM VM in Rust. SOM is a cut-down Smalltalk-like â€¦","t":[0,0,5,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,13,13,13,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,0,0,0,0,0,0,17,3,11,11,11,11,11,12,12,12,12,12,12,11,11,12,12,11,12,12,11,11,11,11,11,11,11,11,12,11,11,12,12,11,11,12,12,12,11,12,11,12,12,12,11,12,12,11,11,11,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,4,13,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,13,8,13,3,13,3,13,3,13,3,13,3,13,3,13,3,3,8,4,8,3,13,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,12,11,11,3,17,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,13,13,13,17,8,17,17,3,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11],"n":["compiler","vm","compile","instrs","Add","And","ArbInt","Array","As32BitSignedValue","As32BitUnsignedValue","AsDouble","AsInteger","AsString","AsSymbol","At","AtPut","AtRandom","BitXor","Block","Class","ClosureReturn","Concatenate","Cos","Div","Double","DoubleDiv","Dummy","Equals","ErrorPrint","ErrorPrintln","Exit","Fields","FromString","FullGC","Global","GlobalLookup","GlobalPut","GreaterThan","GreaterThanEquals","Halt","HasGlobal","Hashcode","Holder","Inspect","InstVarAt","InstVarAtPut","InstVarLookup","InstVarNamed","InstVarSet","Instr","Int","InvokeOnWith","IsDigits","IsLetters","IsWhiteSpace","Length","LessThan","LessThanEquals","Load","LoadFile","LocalVarLookup","LocalVarSet","Methods","Mod","Mul","Name","New","NewArray","NotEquals","ObjectSize","Perform","PerformInSuperClass","PerformWithArguments","PerformWithArgumentsInSuperClass","Pop","PositiveInfinity","PrimSubstringFromTo","Primitive","PrintNewline","PrintStackTrace","PrintString","RefEquals","Rem","Restart","Return","Round","Send","Shl","Shr","Signature","Sin","Sqrt","String","Sub","SuperSend","Superclass","Symbol","Ticks","Time","UpVarDef","UpVarLookup","UpVarSet","Value","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","capture_local","clone","clone","clone","clone_into","clone_into","clone_into","eq","fmt","fmt","fmt","from","from","from","into","into","into","ne","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","upidx","core","error","function","objects","somstack","val","SOM_EXTENSION","VM","add_bigint","add_global","add_send","add_string","add_symbol","array_cls","block1_cls","block2_cls","block3_cls","block_cls","bool_cls","borrow","borrow_mut","cls_cls","double_cls","error","false_","false_cls","flush_inline_caches","from","get_global_or_nil","get_legal_global","inline_cache_lookup","instrs_len","instrs_push","instrs_set","int_cls","into","load_class","metacls_cls","method_cls","new","new_inline_cache","nil","nil_cls","obj_cls","set_global","str_cls","str_is","sym_cls","system","system_cls","top_level_send","true_","true_cls","try_from","try_into","try_into","type_id","BuiltinTypeError","CantRepresentAsDouble","CantRepresentAsIsize","CantRepresentAsUsize","DivisionByZero","DomainError","Exit","IndexError","InstanceTypeError","InvalidDouble","InvalidInteger","InvalidSymbol","NegativeShift","NotANumber","PrimitiveError","RemainderError","ShiftTooBig","UnknownGlobal","UnknownMethod","VMError","VMErrorKind","WrongNumberOfArgs","backtrace","borrow","borrow","borrow_mut","borrow_mut","console_print","eq","fmt","fmt","from","from","into","into","kind","ne","new","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","expected","expected_cls","got","got","got","got_cls","max","tried","wanted","Function","block_func","block_funcs","borrow","borrow_mut","bytecode_end","bytecode_off","containing_method","fmt","from","holder","into","is_primitive","max_stack","new_bytecode","new_primitive","num_params","num_vars","primitive","set_containing_method","set_holder","try_from","try_into","try_into","type_id","upvar_defs","ArbInt","ArbInt","Array","Array","Block","Block","Class","Class","Double","Double","Inst","Inst","Int","Int","Method","Method","MethodsArray","NormalArray","Obj","ObjType","StaticObjType","String_","String_","ThinObj","UpVar","add","add","add","add","alloc","and","and","as_gc","as_integer","as_isize","as_str","as_str","as_usize","at","at","at","at_put","at_put","at_put","bigint","bootstrap","bootstrap","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","boxed_isize","clone","clone_into","close","concatenate","cos","deref","div","div","div","double","double_div","double_div","double_div","downcast","dyn_objtype","dyn_objtype","dyn_objtype","dyn_objtype","dyn_objtype","dyn_objtype","dyn_objtype","dyn_objtype","dyn_objtype","dyn_objtype","dyn_objtype","eq","equals","equals","equals","equals","fields","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from_vec","from_vec","func","func","get_class","get_class","get_class","get_class","get_class","get_class","get_class","get_class","get_class","get_class","get_class","get_method","greater_than","greater_than","greater_than_equals","greater_than_equals","hashcode","hashcode","hashcode","hashcode","hashcode","hashcode","hashcode","hashcode","hashcode","inst","inst_var_at","inst_var_at_put","inst_vars_map","instrs_off","into","into","into","into","into","into","into","into","into","into","into","into","into","is_closed","iter","iter","iter","length","length","length","length","less_than","less_than","less_than","less_than_equals","less_than_equals","method_stack_base","methods","modulus","modulus","modulus","mul","mul","mul","mul","name","new","new","new","new","new","new","new","new","new","new_from_layout","new_str","new_sym","not_equals","not_equals","num_inst_vars","num_inst_vars","num_inst_vars","path","prev","recover_gc","ref_equals","ref_equals","ref_equals","ref_equals","remainder","remainder","round","set_cls","set_metacls","set_methods_class","set_prev","set_supercls","shl","shl","shr","shr","sig","sin","sqrt","sqrt","sqrt","static_objtype","static_objtype","static_objtype","static_objtype","static_objtype","static_objtype","static_objtype","static_objtype","static_objtype","static_objtype","static_objtype","sub","sub","sub","sub","substring","supercls","symbol_to_string_","to_array","to_array","to_array","to_f64","to_gc","to_owned","to_string_","to_strval","to_strval","to_strval","to_strval","to_strval","to_symbol","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unchecked_at","unchecked_at","unchecked_at","unchecked_inst_var_get","unchecked_inst_var_get","unchecked_inst_var_get","unchecked_inst_var_set","unchecked_inst_var_set","unchecked_inst_var_set","upvars","xor","xor","SOMStack","SOM_STACK_LEN","addr_of","borrow","borrow_mut","from","into","is_empty","len","new","peek","peek_at","peek_n","pop","pop_n","push","remaining_capacity","set","split_off","truncate","try_from","try_into","try_into","type_id","BITSIZE","GCBOX","ILLEGAL","INT","INT_BITMASK","NotUnboxable","TAG_BITMASK","TAG_BITSIZE","Val","ValKind","add","and","as_f64","as_isize","as_usize","bit_eq","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","div","double_div","downcast","dyn_objtype","eq","eq","equals","fmt","fmt","from","from","from_bool","from_isize","from_obj","from_u64","from_unchecked","from_usize","get_class","greater_than","greater_than_equals","hashcode","illegal","into","into","less_than","less_than_equals","modulus","mul","ne","new_from_layout","not_equals","recover","ref_equals","remainder","shl","shr","sqrt","sub","to_owned","to_strval","tobj","try_downcast","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","val","valkind","xor"],"q":["yksom","","yksom::compiler","","yksom::compiler::instrs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","yksom::vm","","","","","","yksom::vm::core","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","yksom::vm::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","yksom::vm::error::VMErrorKind","","","","","","","","","yksom::vm::function","","","","","","","","","","","","","","","","","","","","","","","","","","yksom::vm::objectsyksom::vm::somstack","","","","","","","","","","","","","","","","","","","","","","","","yksom::vm::val","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A SOM compiler. This is currently fairly simplistic, â€¦","The yksom run-time. The run-time uses trait objects but â€¦","Compile a class. Should only be called by the <code>VM</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Is this <code>value</code> (0), <code>value:</code> (1), or <code>value:with:</code> (2)?","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The core part of the interpreter.","","","This module contains the core SOM objects. Note that â€¦","","Tagged pointer support.","","The core VM struct.","Add the <code>BigInt</code> <code>x</code> to the VM, returning its index. Note â€¦","Add the global <code>n</code> to the VM, returning its index. Note â€¦","Add the send <code>send</code> to the VM, returning its index. Note â€¦","Add the string <code>s</code> to the VM, returning its index. Note â€¦","Add the symbol <code>s</code> to the VM, returning its index. Note â€¦","","","","","","","","","","","Inform the user of the error string <code>error</code> and then exit.","","","","","Lookup the global <code>name</code>: if it has not been added, or has â€¦","Get the global at position <code>i</code>: if it has not been set â€¦","Lookup the method <code>name</code> in the class <code>rcv_cls</code>, utilising â€¦","How many instructions are currently present in the VM?","Push <code>instr</code> to the end of the current vector of â€¦","Push <code>instr</code> to the end of the current vector of â€¦","","","Load the class <code>name</code>. Note that this looks <code>name</code> up in the â€¦","","","","Add an empty inline cache to the VM, returning its index.","","","","Set the global <code>name</code> to the value <code>v</code>, overwriting the â€¦","","Does every character in the SOM string in <code>rcv</code> satisfy the â€¦","","","","Send the message <code>msg</code> to the receiver <code>rcv</code> with arguments â€¦","","","","","","","We expected a Rust type <code>expected</code> but at run-time got a â€¦","A value which canâ€™t be represented in an <code>f64</code>.","A value which canâ€™t be represented in an <code>isize</code>.","A value which canâ€™t be represented in an <code>usize</code>.","","A value which is mathematically undefined.","The VM is trying to exit.","Tried to access an out-of-bounds element.","We expected a SOM value that is an instance of â€¦","Tried to convert an invalid string to a Double.","Tried to convert an invalid string to an Integer.","Tried to access a global before it being initialised.","Tried to do a shl or shr with a value below zero.","A specialised version of TypeError, because SOM has more â€¦","Something went wrong when trying to execute a primitive.","Tried to calculate a remainder that was a divide by zero â€¦","Tried to do a shl that would overflow memory and/or not â€¦","An unknown global.","An unknown method.","","","Tried calling a method with the wrong number of arguments.","The callstack (in reverse order) of (Class, Span) pairs.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The VMâ€™s underlying notion of a SOM function. SOM has â€¦","","","","","If this <code>Function</code> is not a SOM primitive, and if this â€¦","If this <code>Function</code> is not a SOM primitive, return the start â€¦","","","","","","Is this <code>Function</code> a SOM primitive?","If this <code>Function</code> is not a SOM primitive, return the â€¦","","","","If this <code>Function</code> is not a SOM primitive, return its â€¦","If this <code>Function</code> is a SOM primitive, return the <code>Primitive</code>â€¦","","Set this function, and recursively all its nested â€¦","","","","","","A boxed arbitrary sized <code>BigInt</code>.","","","","","","","","A boxed Double (which is synonymous with a f64 in yksom).","","An instance of a user class.","","A boxed <code>isize</code>.","","","","","","The main SOM Object trait. Notice that code should almost â€¦","The SOM type of objects.","","","","A narrow pointer to #trait_id.","An UpVar references either a variable on the stack or, if â€¦","","","","Produce a new <code>Val</code> which adds <code>other</code> to this.","Create a new <code>NormalArray</code> with a backing store of <code>len</code> â€¦","","Produce a new <code>Val</code> which performs a bitwise and with <code>other</code> â€¦","","","","","","","Return the item at index <code>idx</code> (using SOM indexing starting â€¦","","","Set the item at index <code>idx</code> (using SOM indexing starting at â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a <code>Val</code> representing the <code>usize</code> integer <code>i</code>. The <code>Val</code> is â€¦","","","","Concatenate this string with another string and return â€¦","","","","","Produce a new <code>Val</code> which divides <code>other</code> from this.","","","","","Try casting this narrow trait object to a concrete struct â€¦","What <code>ObjType</code> does this <code>Val</code> represent?","","","","","","","","","","","","","","","Does this <code>Val</code> equal <code>other</code>?","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","What class is this object an instance of?","","","","","","","","","","","","","Is this <code>Val</code> greater than <code>other</code>?","","Is this <code>Val</code> greater than or equal to <code>other</code>?","","","","","","","","","What is this objectâ€™s hashcode?","This <code>Block</code>â€™s <code>self</code> val. XXX This should probably be part â€¦","Return the instance variable at <code>i</code> (using SOM indexing).","Return the instance variable at <code>i</code> (using SOM indexing).","","Offset to this classâ€™s instructions in VM::instrs.","","","","","","","","","","","","","","","Iterate over this arrayâ€™s values.","","","","","","What is this objectâ€™s length?","","","Is this <code>Val</code> less than <code>other</code>?","","Is this <code>Val</code> less than or equal to <code>other</code>?","For closures which perform a method return (i.e. they â€¦","","","","Produce a new <code>Val</code> which performs a mod operation on this â€¦","","","","Produce a new <code>Val</code> which multiplies <code>other</code> to this.","","","","","","","","Create a <code>Val</code> representing the <code>BigInt</code> integer <code>val</code>. Note â€¦","","Create a new narrow pointer to <code>U: #trait_id</code>.","Create a narrow pointer to <code>U: #trait_id</code>. <code>layout</code> must be â€¦","","","","Does this <code>Val</code> not equal <code>other</code>?","","","How many instance variables does this object contain?","","","Convert a downcasted narrow trait object back into a â€¦","","","","Is this <code>Val</code> reference equality equal to <code>other</code>? Only â€¦","","Produce a new <code>Val</code> which returns the remainder of dividing â€¦","","","","","","","","Produce a new <code>Val</code> which shifts <code>self</code> <code>other</code> bits to the â€¦","","Produce a new <code>Val</code> which shifts <code>self</code> <code>other</code> bits to the â€¦","","","","","Produces a new <code>Val</code> which is the square root of this.","Return this trait typeâ€™s static <code>ObjType</code>","","","","","","","","","","","","","","Produce a new <code>Val</code> which subtracts <code>other</code> from this.","","","If the value <code>v</code> represents a <code>String_</code> which is an instance â€¦","","","If (and only if) this object implements the [Array] trait â€¦","If this <code>ArbInt</code> can be represented as a finite <code>f64</code>, return â€¦","","","","","","","","Convert this object to a <code>Val</code> that represents a SOM string.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return the item at index <code>idx</code> (using SOM indexing starting â€¦","","","","","Lookup an instance variable in this object. If <code>usize</code> â€¦","","","Set an instance variable in this object. If <code>usize</code> exceeds â€¦","","","Produce a new <code>Val</code> which performs a bitwise xor with <code>other</code> â€¦","A contiguous stack of SOM values. This stack does minimal â€¦","","","","","","","Returns <code>true</code> if the stack contains no elements.","Returns the number of elements in the stack.","","Returns the top-most value of the stack without removing â€¦","Peeks at a value <code>n</code> items from the top of the stack.","Peeks at a value <code>n</code> items from the top of the stack.","Pops the top-most value of the stack and returns it. If â€¦","Pops the top-most value of the stack and returns it. If â€¦","Push <code>v</code> onto the end of the stack. You must previously â€¦","Returns the number of elements the stack can store before â€¦","","Splits the collection into two at the given index.","Shortens the stack, keeping the first len elements and â€¦","","","","","","A pointer to a <code>Gc</code> element.","An illegal value. Any operations on a <code>Val</code> of this kind â€¦","A tagged integer.","","Objects which <code>impl</code> this trait guarantee that they can â€¦","","","The core struct representing values in the language â€¦","","Produce a new <code>Val</code> which adds <code>other</code> to this.","Produce a new <code>Val</code> which performs a bitwise and operation â€¦","","If this <code>Val</code> represents a non-bigint integer, return its â€¦","If this <code>Val</code> represents a non-bigint integer, return its â€¦","Is this <code>Val</code> bit equal to <code>other</code>? This is a very strong â€¦","","","","","","","Produce a new <code>Val</code> which divides <code>other</code> from this.","Produce a new <code>Val</code> which perfoms a Double divide on <code>other</code> â€¦","Cast a <code>Val</code> into an instance of type <code>T</code> (where <code>T</code> must â€¦","What <code>ObjType</code> does this <code>Val</code> represent?","","","","","","","","If <code>v == true</code>, return a <code>Val</code> representing <code>vm.true_</code>, â€¦","Create a (possibly boxed) <code>Val</code> representing the <code>isize</code> â€¦","Create a new <code>Val</code> from an object that should be allocated â€¦","","Transmutes <code>number: usize</code> into a [<code>ValKind</code>].","Create a (possibly boxed) <code>Val</code> representing the <code>usize</code> â€¦","What class is this <code>Val</code> an instance of?","","","Produce a new <code>Val</code> which adds <code>other</code> to this.","Create a value upon which all operations are invalid. â€¦","","","","","Produce a new <code>Val</code> which performs a mod operation on this â€¦","Produce a new <code>Val</code> which multiplies <code>other</code> to this.","","Allocate memory on the heap into which an object (and, â€¦","","Convert <code>obj</code> into a <code>Val</code>. <code>Obj</code> must previously have been â€¦","Is this <code>Val</code> reference equal to <code>other</code>? Notice that for â€¦","Produce a new <code>Val</code> which performs a mod operation on this â€¦","Produce a new <code>Val</code> which shifts <code>self</code> <code>other</code> bits to the â€¦","Produce a new <code>Val</code> which shifts <code>self</code> <code>other</code> bits to the â€¦","Produces a new <code>Val</code> which is the square root of this.","Produce a new <code>Val</code> which subtracts <code>other</code> from this.","","","Return this <code>Val</code>â€™s box. If the <code>Val</code> refers to an unboxed â€¦","Cast a <code>Val</code> into an instance of type <code>T</code> (where <code>T</code> must â€¦","","","","","","","","","","What is this <code>Val</code>â€™s <code>ValKind</code>.","Produce a new <code>Val</code> which performs a bitwise xor operation â€¦"],"i":[0,0,0,0,1,1,2,2,1,1,1,1,1,1,1,1,1,1,2,1,2,1,1,1,2,1,2,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,2,1,2,0,2,1,1,1,1,1,1,1,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,0,1,1,1,1,1,1,2,1,2,1,1,1,1,1,2,1,2,1,2,1,1,0,2,2,1,3,2,1,3,2,1,3,3,2,1,3,2,1,1,3,2,1,3,2,1,3,2,1,1,3,2,1,3,2,1,3,3,2,2,1,1,3,2,1,3,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,5,6,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,6,5,6,6,5,5,6,5,7,8,7,9,10,8,11,11,10,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,13,0,13,0,13,0,13,0,13,0,13,0,13,0,13,0,0,0,0,0,0,13,0,0,14,15,16,17,18,15,17,19,14,16,20,13,16,21,18,22,21,18,22,15,23,24,18,22,25,26,23,14,27,15,16,24,20,13,19,18,22,25,26,23,14,27,15,16,24,20,13,19,16,25,25,25,20,14,19,15,16,17,14,14,15,17,19,17,18,22,26,23,14,27,15,16,24,20,13,14,15,20,17,23,18,22,25,26,23,14,27,15,16,24,20,13,18,22,25,26,23,14,27,15,16,24,20,13,19,18,22,26,24,17,18,22,26,23,14,27,15,16,24,20,23,15,17,15,17,18,22,26,23,14,27,24,20,17,26,17,17,23,23,18,22,25,26,23,14,27,15,16,24,20,13,19,25,21,18,22,18,22,20,17,14,15,17,15,17,26,23,14,15,17,14,15,16,17,23,18,25,26,23,14,27,15,24,19,19,20,20,15,17,23,27,17,23,25,19,14,15,20,17,15,17,14,20,23,23,25,23,15,17,15,17,24,14,14,15,17,28,18,22,26,23,14,27,15,16,24,20,14,15,16,17,20,23,20,18,22,17,15,25,25,20,14,15,16,20,17,20,18,22,25,26,23,14,27,15,16,24,20,13,19,18,18,22,22,25,25,26,26,23,23,14,14,27,27,15,15,16,16,24,24,20,20,13,13,19,19,18,22,25,26,23,14,27,15,16,24,20,13,19,21,18,22,23,27,17,23,27,17,26,15,17,0,0,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,0,30,30,30,0,0,0,0,0,0,31,31,31,31,31,31,30,31,30,31,31,31,31,31,31,31,30,31,31,30,31,30,31,31,31,31,31,30,31,31,31,31,31,31,30,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,30,31,30,30,31,31,30,31,31,31,31],"f":[null,null,[[["path",3],["vm",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["upvardef",3]],[[],["instr",4]],[[],["primitive",4]],[[]],[[]],[[]],[[["primitive",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["primitive",4]],["bool",15]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,[[["bigint",3]],["usize",15]],[[["str",15]],["usize",15]],[[],["usize",15]],[[["smartstring",6]],["usize",15]],[[["smartstring",6]],["usize",15]],null,null,null,null,null,null,[[]],[[]],null,null,[[["str",15]]],null,null,[[]],[[]],[[["str",15]],["val",3]],[[["usize",15]],[["val",3],["box",3],["result",4]]],[[["usize",15],["val",3],["str",15]],[["box",3],["result",4],["gc",3]]],[[],["usize",15]],[[["span",3],["instr",4]]],[[["usize",15],["span",3],["instr",4]]],null,[[]],[[["str",15]],[["val",3],["result",4]]],null,null,[[["pathbuf",3],["vec",3]]],[[],["usize",15]],null,null,null,[[["val",3],["str",15]]],null,[[["val",3]],[["box",3],["result",4]]],null,null,null,[[["val",3],["vec",3],["str",15]],[["val",3],["box",3],["result",4]]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[["vm",3]]],[[["vmerrorkind",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],null,[[["vmerrorkind",4]],["bool",15]],[[["vm",3],["vmerrorkind",4]],["box",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,[[["usize",15]],[["gc",3],["function",3]]],[[],["vec",3]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],[["method",3],["gc",3]]],[[["formatter",3]],["result",6]],[[]],[[],["val",3]],[[]],[[],["bool",15]],[[],["usize",15]],[[["usize",15],["vm",3],["vec",3],["vec",3],["gc",3],["option",4],["upvardef",3]],["function",3]],[[["usize",15],["vm",3],["primitive",4]],["function",3]],[[],["usize",15]],[[],["usize",15]],[[],["primitive",4]],[[["gc",3],["method",3]]],[[["val",3],["vm",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["vec",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["val",3],["gc",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[["val",3],["gc",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[["val",3],["gc",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[["val",3],["gc",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[["usize",15]],["val",3]],[[["val",3],["gc",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[["val",3],["gc",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[],[["obj",8],["gc",3]]],[[["vm",3]],["val",3]],[[],["isize",15]],[[],["str",15]],[[],["str",15]],[[["vm",3]],[["usize",15],["result",4],["box",3]]],[[["usize",15],["vm",3],["gc",3]],[["val",3],["box",3],["result",4]]],[[["usize",15],["vm",3],["gc",3]],[["val",3],["box",3],["result",4]]],[[["usize",15],["vm",3],["gc",3]],[["val",3],["box",3],["result",4]]],[[["usize",15],["val",3],["gc",3],["vm",3]],[["box",3],["result",4]]],[[["usize",15],["val",3],["gc",3],["vm",3]],[["box",3],["result",4]]],[[["usize",15],["val",3],["gc",3],["vm",3]],[["box",3],["result",4]]],[[],["bigint",3]],[[["vm",3]]],[[["vm",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["isize",15],["vm",3]],["val",3]],[[],["upvar",3]],[[]],[[]],[[["val",3],["gc",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[["vm",3]],["val",3]],[[],["obj",8]],[[["val",3],["gc",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[["val",3],["gc",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[["val",3],["gc",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[],["f64",15]],[[["val",3],["gc",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[["val",3],["gc",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[["val",3],["gc",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[],[["option",4],["gc",3]]],[[["gc",3]],["objtype",4]],[[["gc",3]],["objtype",4]],[[["gc",3]],["objtype",4]],[[["gc",3]],["objtype",4]],[[["gc",3]],["objtype",4]],[[["gc",3]],["objtype",4]],[[["gc",3]],["objtype",4]],[[["gc",3]],["objtype",4]],[[["gc",3]],["objtype",4]],[[["gc",3]],["objtype",4]],[[["gc",3]],["objtype",4]],[[["objtype",4]],["bool",15]],[[["val",3],["gc",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[["val",3],["gc",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[["val",3],["gc",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[["val",3],["gc",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[["vm",3]],["val",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["val",3],["vec",3]],["val",3]],[[["val",3],["vm",3],["vec",3]],["val",3]],null,null,[[["gc",3],["vm",3]],["val",3]],[[["gc",3],["vm",3]],["val",3]],[[["gc",3],["vm",3]],["val",3]],[[["gc",3],["vm",3]],["val",3]],[[["gc",3],["vm",3]],["val",3]],[[["gc",3],["vm",3]],["val",3]],[[["gc",3],["vm",3]],["val",3]],[[["gc",3],["vm",3]],["val",3]],[[["gc",3],["vm",3]],["val",3]],[[["gc",3],["vm",3]],["val",3]],[[["gc",3],["vm",3]],["val",3]],[[["vm",3],["str",15]],[["box",3],["result",4],["gc",3]]],[[["val",3],["gc",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[["val",3],["gc",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[["val",3],["gc",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[["val",3],["gc",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[["gc",3]],["u64",15]],[[["gc",3]],["u64",15]],[[["gc",3]],["u64",15]],[[["gc",3]],["u64",15]],[[["gc",3]],["u64",15]],[[["gc",3]],["u64",15]],[[["gc",3]],["u64",15]],[[["gc",3]],["u64",15]],[[["gc",3]],["u64",15]],null,[[["usize",15],["vm",3],["gc",3]],[["val",3],["box",3],["result",4]]],[[["usize",15],["vm",3],["gc",3],["val",3]],[["box",3],["result",4]]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[["gc",3]],["arrayiterator",3]],[[["gc",3]],["arrayiterator",3]],[[["gc",3]],["arrayiterator",3]],[[["gc",3]],["usize",15]],[[["gc",3]],["usize",15]],[[["gc",3]],["usize",15]],[[["gc",3]],["usize",15]],[[["val",3],["gc",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[["val",3],["gc",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[["val",3],["gc",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[["val",3],["gc",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[["val",3],["gc",3],["vm",3]],[["val",3],["box",3],["result",4]]],null,[[["vm",3]],["val",3]],[[["val",3],["gc",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[["val",3],["gc",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[["val",3],["gc",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[["val",3],["gc",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[["val",3],["gc",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[["val",3],["gc",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[["val",3],["gc",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[["vm",3]],[["val",3],["box",3],["result",4]]],[[["usize",15],["vm",3]],["val",3]],[[["val",3],["gc",3],["gc",3],["option",4]]],[[["val",3],["gc",3],["vm",3],["function",3],["gc",3],["usize",15],["vec",3]],["val",3]],[[["val",3],["usize",15],["hashmap",3],["vm",3],["pathbuf",3],["smartstring",6]],["val",3]],[[["f64",15],["vm",3]],["val",3]],[[["val",3],["vm",3]],["val",3]],[[["vm",3],["bigint",3]],["val",3]],[[["val",3],["vm",3],["function",3]],["val",3]],[[["send",8]],["gc",3]],[[["layout",3]],["gc",3]],[[["vm",3],["smartstring",6]],["val",3]],[[["vm",3],["smartstring",6]],["val",3]],[[["val",3],["gc",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[["val",3],["gc",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[["vm",3],["gc",3]],["usize",15]],[[["vm",3],["gc",3]],["usize",15]],[[["vm",3],["gc",3]],["usize",15]],null,[[],[["gc",3],["option",4]]],[[["gc",3],["obj",8]],[["gc",3],["thinobj",3]]],[[["val",3],["gc",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[["val",3],["gc",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[["val",3],["gc",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[["val",3],["gc",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[["val",3],["gc",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[["val",3],["gc",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[["vm",3]],["val",3]],[[["val",3]]],[[["val",3],["vm",3]]],[[["val",3],["vm",3]]],[[["gc",3],["option",4]]],[[["val",3],["vm",3]]],[[["val",3],["gc",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[["val",3],["gc",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[["val",3],["gc",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[["val",3],["gc",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[["vm",3]],["val",3]],[[["vm",3]],["val",3]],[[["gc",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[["gc",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[["gc",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[],["objtype",4]],[[],["objtype",4]],[[],["objtype",4]],[[],["objtype",4]],[[],["objtype",4]],[[],["objtype",4]],[[],["objtype",4]],[[],["objtype",4]],[[],["objtype",4]],[[],["objtype",4]],[[],["objtype",4]],[[["val",3],["gc",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[["val",3],["gc",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[["val",3],["gc",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[["val",3],["gc",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[["usize",15],["vm",3]],[["val",3],["box",3],["result",4]]],[[["vm",3]],["val",3]],[[["val",3],["vm",3]],[["box",3],["result",4],["gc",3]]],[[["gc",3]],[["box",3],["result",4],["gc",3]]],[[["gc",3]],[["box",3],["result",4],["gc",3]]],[[["gc",3]],[["box",3],["result",4],["gc",3]]],[[["vm",3]],[["f64",15],["result",4],["box",3]]],[[],[["val",3],["gc",3]]],[[]],[[["vm",3]],[["val",3],["box",3],["result",4]]],[[["gc",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[["gc",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[["gc",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[["gc",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[["gc",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[["vm",3]],[["val",3],["box",3],["result",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["usize",15],["gc",3]],["val",3]],[[["usize",15],["gc",3]],["val",3]],[[["usize",15],["gc",3]],["val",3]],[[["usize",15],["vm",3],["gc",3]],["val",3]],[[["usize",15],["vm",3],["gc",3]],["val",3]],[[["usize",15],["vm",3],["gc",3]],["val",3]],[[["usize",15],["vm",3],["gc",3],["val",3]]],[[["usize",15],["vm",3],["gc",3],["val",3]]],[[["usize",15],["vm",3],["gc",3],["val",3]]],null,[[["val",3],["gc",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[["val",3],["gc",3],["vm",3]],[["val",3],["box",3],["result",4]]],null,null,[[["usize",15],["gc",3]],[["val",3],["gc",3]]],[[]],[[]],[[]],[[]],[[["gc",3]],["bool",15]],[[["gc",3]],["usize",15]],[[],["gc",3]],[[["gc",3]],["val",3]],[[["usize",15],["gc",3]],["val",3]],[[["usize",15],["gc",3]],["val",3]],[[["gc",3]],["val",3]],[[["usize",15],["gc",3]],["val",3]],[[["val",3],["gc",3]]],[[["gc",3]],["usize",15]],[[["usize",15],["val",3],["gc",3]]],[[["usize",15],["gc",3]],["val",3]],[[["usize",15],["gc",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,[[["val",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[["val",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[["vm",3]],[["f64",15],["result",4],["box",3]]],[[["vm",3]],[["box",3],["isize",15],["result",4]]],[[["vm",3]],[["usize",15],["result",4],["box",3]]],[[["val",3]],["bool",15]],[[]],[[]],[[]],[[]],[[],["val",3]],[[]],[[["val",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[["val",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[["vm",3]],[["gc",3],["result",4],["box",3]]],[[["vm",3]],["objtype",4]],[[["valkind",4]],["bool",15]],[[["val",3]],["bool",15]],[[["val",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["bool",15],["vm",3]],["val",3]],[[["isize",15],["vm",3]],["val",3]],[[["obj",8]],["val",3]],[[["vm",3],["u64",15]],["val",3]],[[["usize",15]]],[[["usize",15],["vm",3]],["val",3]],[[["vm",3]],["val",3]],[[["val",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[["val",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[["vm",3]],["val",3]],[[],["val",3]],[[]],[[]],[[["val",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[["val",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[["val",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[["val",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[["val",3]],["bool",15]],[[["layout",3]],["val",3]],[[["val",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[["gc",3],["obj",8]]],[[["val",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[["val",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[["val",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[["val",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[["vm",3]],[["val",3],["box",3],["result",4]]],[[["val",3],["vm",3]],[["val",3],["box",3],["result",4]]],[[]],[[["vm",3]],[["val",3],["box",3],["result",4]]],[[["vm",3]],[["result",4],["gc",3],["box",3]]],[[["vm",3]],[["option",4],["gc",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,[[],["valkind",4]],[[["val",3],["vm",3]],[["val",3],["box",3],["result",4]]]],"p":[[4,"Primitive"],[4,"Instr"],[3,"UpVarDef"],[3,"VM"],[4,"VMErrorKind"],[3,"VMError"],[13,"BuiltinTypeError"],[13,"InstanceTypeError"],[13,"NotANumber"],[13,"WrongNumberOfArgs"],[13,"IndexError"],[3,"Function"],[4,"ObjType"],[3,"Double"],[3,"ArbInt"],[3,"Int"],[8,"Obj"],[3,"NormalArray"],[3,"ThinObj"],[3,"String_"],[8,"Array"],[3,"MethodsArray"],[3,"Class"],[3,"Method"],[3,"UpVar"],[3,"Block"],[3,"Inst"],[8,"StaticObjType"],[3,"SOMStack"],[4,"ValKind"],[3,"Val"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};